#ifndef _ADG731_2_H
#define	_ADG731_2_H

#include <xc.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stddef.h>
#include <string.h>
#include <limits.h>


/**********************************************************************************************************************************/
/*=== PIN ASSIGNMENTS ============================================================================================================*/
/**********************************************************************************************************************************/
#define sw2CsPin()                 (LATCbits.LATC1)                             // SW CS pin
#define sw2SpiOpenFrame()          (sw2CsPin() = 0)                             // SW SPI frame open
#define sw2SpiCloseFrame()         (sw2CsPin() = 1)                             // SW SPI frame close

/**********************************************************************************************************************************/
/*=== SYSTEM ASSIGNMENTS =========================================================================================================*/
/**********************************************************************************************************************************/
#define sw2SpiBuf()                SPI2BUF                                      // SPI hardware buffer in use
#define sw2SpiTxBufFull()          SPI2STATbits.SPITBF                          // SPI transmit buffer full flag
#define sw2SpiRxBufEmpty()         SPI2STATbits.SPIRBE                          // SPI receive buffer empty flag
#define sw2SpiBusy()               SPI2STATbits.SPIBUSY                         // SPI busy flag
#define sw2SpiCon()                (SPI2CON)                                    // SPIxCON associated with allocated SPI port
#define sw2SpiCon2()               (SPI2CON2)                                   // SPIxCON2 associated with allocated SPI port
#define sw2SpiBrg()                (SPI2BRG)                                    // SPIxBRG associated with allocated SPI port

/**********************************************************************************************************************************/
/*=== MACROS =====================================================================================================================*/
/**********************************************************************************************************************************/
#define sw2BufSize()              (UINT8_MAX+1)                                 // Soft buffer size
#define sw2CmdSize()              1                                             // command size
#define sw2Min()                  0                                             // Number of sw2itches
#define sw2Max()                  31                                            // Number of sw2itches
#define sw2Off()                  0                                             // Switch off identifier
#define sw2On()                   1                                             // Switch on idenfitifer

/*=== SWITCH STATE VALUES ========================================================================================================*/
#define sw2WriteState()           0x00                                          // State machine write state

/**********************************************************************************************************************************/
/*=== VARIABLES ==================================================================================================================*/
/**********************************************************************************************************************************/
typedef struct{
    uint8_t tx[sw2BufSize()];                                                    // TX soft buffer
    uint8_t txStart;                                                            // TX soft buffer start index
    uint8_t txEnd;                                                              // TX soft buffer end index    
    uint8_t state;                                                              // State machine state variable
    uint8_t actv;                                                               // Active sw2itch number
} sw2_obj;

/**********************************************************************************************************************************/
/*=== FUNCTION PROTOTYPES ========================================================================================================*/
/**********************************************************************************************************************************/

/*** sw2SpiInit *******************************************************************************************************************/
void sw2SpiInit(void);

/*** sw2SpiRxFifoClear ************************************************************************************************************/
void sw2SpiRxFifoClear(void);

/*** sw2Initialize ****************************************************************************************************************/
void sw2Initialize(void);

/*** sw2Sel ***********************************************************************************************************************/
bool sw2Sel(uint8_t sw2Num);

/*** sw2TxBytes *******************************************************************************************************************/
uint8_t sw2TxBytes(void);

/*** sw2Service *******************************************************************************************************************/
void sw2Service(void);

#endif                                                                          // End _ADG731_2_H